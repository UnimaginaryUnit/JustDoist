"""
Django settings for justdoist project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET", '^yk4c0q%!p+zyl#6!4a+l9sy0=$d_hdwe#l74scpi$0_$iv7)v'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "True") == "True"

ALLOWED_HOSTS = ['.justdoist.com']
if DEBUG: ALLOWED_HOSTS.append("*")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Our apps
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'justdoist.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'justdoist.wsgi.application'

AUTH_USER_MODEL = "main.JustdoistUser"

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ.get("DB_NAME", "postgres"),
            'USER': os.environ.get("DB_USER", "postgres"),
            'HOST': os.environ.get("DB_HOST", 'localhost'),  # set in docker-compose.yml
            'PORT': os.environ.get("DB_PORT", 5432),  # default postgresql port
            'PASSWORD': os.environ.get("POSTGRES_PASSWORD"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "main/static"),
]

LOGIN_URL = "/login"

OAUTH_CREDENTIALS = {
    'todoist': {
        'id': os.environ.get('TODOIST_ID', '6a8efb2da8924399b729d69754d20306'),
        'secret': os.environ.get("TODOIST_SECRET", '157199b7531547b9a379b43f1b43da44'),
    }
}

STRIPE_PUBLIC_KEY = os.environ.get("STRIPE_SECRET_KEY", "pk_test_lVoperTigPyVUr0ti58PxtD9")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY", "sk_test_nhlYKipeW7h6773CWLRQku3M")

PREMIUM_PRICE_PER_DAY = 0.25
PREMIUM_PRICE_PER_WEEK = PREMIUM_PRICE_PER_DAY * 7

POSSIBLE_PROBLEMS = ["task_grouping", "exhaustion", "lack_priorities", "regular_use"]
PROBLEMS_TO_UID = {
    "lack_priorities": 2,
    "regular_use": 3,
}
is_available = lambda p: p in PROBLEMS_TO_UID

FIRST_TASK_ACHIEVEMENT_ID = 0
PREMIUM_SUBSCRIPTION_ACHIEVEMENT_ID = 8
